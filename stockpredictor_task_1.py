# -*- coding: utf-8 -*-
"""Stockpredictor_task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RRvR1JqRgrrXxGWVydaZFn-Bi1zy1Dg7
"""

### keras and TensorFlow >2.0

### Data Collection
# import pandas_datareader as pdr
# key='7080e76e8c311e55313c8d553e34d9b58e70aed4'

!pip install --upgrade pandas-datareader

!pip install python-dotenv
!pip install --upgrade pandas pandas_datareader

# df = pdr.get_data_tiingo('AAPL',api_key=key)
# df = pd.concat([df])
# import pandas as pd
# import pandas_datareader as pdr
# from dotenv import load_dotenv
# import requests
# import os

# key='7080e76e8c311e55313c8d553e34d9b58e70aed4'

# df = pdr.get_data_tiingo('AAPL',api_key=key)

# # Wrap the dataframes in a list before concatenating
# df = pd.concat([df])
import os
from dotenv import load_dotenv
import requests
import pandas as pd

# Load environment variables from .env file
load_dotenv('/content/api.env')  # Replace with the path to your .env file

# Get the API key from the environment
api_key = os.getenv('API_KEY')

# Check if the API key is loaded properly
if not api_key:
    raise ValueError("API key not found. Please ensure the API_KEY environment variable is set in the .env file.")

# Fetch data from Tiingo API using requests
url = f"https://api.tiingo.com/tiingo/daily/AAPL/prices?token={api_key}"
response = requests.get(url)

# Check if the request was successful
if response.status_code != 200:
    raise ValueError(f"Error fetching data from Tiingo: {response.status_code}, {response.text}")

# Load data into a DataFrame
data = response.json()
df = pd.DataFrame(data)

# Convert 'date' column to datetime and set as index
df['date'] = pd.to_datetime(df['date'])
df.set_index('date', inplace=True)

# Print the DataFrame
print(df.head())

df.to_csv('AAPL.csv')

df=pd.read_csv('/content/AAPL.csv')

df.head()

df.tail()

df1=df.reset_index()['close']

df1.shape

import matplotlib.pyplot as plt
plt.plot(df1)

### LSTM is sensitive to scale hence scaling to 0-1 using MinMax Scaler

import numpy as np

df1

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

df1.shape

## for time series data divide test train data wrt date

## split for train and test
training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

training_size,test_size  ### to have data for nth day(Y_train) , you should have (n-1)th days data(X_train)

import numpy
def create_dataset(dataset,time_step=1):
    dataX,dataY=[],[]
    for i in range(len(dataset)-time_step-1):
        a=dataset[i:(i+time_step),0]   #i=0,  0,1,2,3
        dataX.append(a)
        dataY.append(dataset[i+time_step,0])
    return numpy.array(dataX),numpy.array(dataY)

time_step=100
X_train,Y_train=create_dataset(train_data,time_step)
X_test,Y_test=create_dataset(test_data,time_step)

print(X_train.shape),print(Y_train.shape)

print(X_test.shape),print(Y_test.shape)

## converting 2d into 3d for the lstm to give output[samples,time_stamp,features]--> required FOR LSTM
X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)

#Create the Stacked LSTM Model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense   #libraries used for LSTM
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,Y_train,validation_data=(X_test,Y_test),epochs=100,batch_size=64,verbose=1)

import tensorflow as tf

# Prediction and performance Matrics
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

#transform to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

#Cal Root mean square Error Performance matrix
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(Y_train,train_predict))

# Test Data RMSE
math.sqrt(mean_squared_error(Y_test,test_predict))

#Plotting  yellow-> train , green->test
# shift train predictions for plotting
look_back=100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
# shift test predictions for plotting
testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict
# plot baseline and predictions
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

len(test_data)

# to predict nth day in future you will need to have n-1 days data
X_input=test_data[341:].reshape(1,-1)
X_input.shape

temp_input=list(X_input)
temp_input=temp_input[0].tolist()

# to demonstrate prediction for next 10 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):

    if(len(temp_input)>100):  #shifting 1 pos to right to have new value
        #print(temp_input)
        X_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,X_input))
        X_input=X_input.reshape(1,-1)
        X_input = X_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(X_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        X_input = X_input.reshape((1, n_steps,1))
        yhat = model.predict(X_input, verbose=0)
        print(yhat[0])       # it is added to both final output and to the original list(prev input)
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1


print(lst_output)

day_new=np.arange(1,101)
day_pred=np.arange(101,131)

len(df1)

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(day_new,scaler.inverse_transform(df1[1158:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))
# blue line is prev data orange line is prediction data

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

